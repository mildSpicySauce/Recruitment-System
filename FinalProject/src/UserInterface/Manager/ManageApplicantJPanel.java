/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.Manager;

import Business.Account.EmployeeAccount;
import Business.Applicant.Applicant;
import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Enterprise.Enterprise;
import Business.Network.Network;
import Business.WorkQueue.ApplicationStatus;
import Business.WorkQueue.ApplyRequest;
import Business.WorkQueue.ExamRequest;
import Business.WorkQueue.ExamStatus;
import Business.WorkQueue.WorkRequest;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author 11638
 */
public class ManageApplicantJPanel extends javax.swing.JPanel {

    EmployeeAccount account;
    Enterprise en;
    EcoSystem system;
    Network network;

    /**
     * Creates new form ManageApplicantJPanel
     */
    public ManageApplicantJPanel(EcoSystem system, Network net, Enterprise en, EmployeeAccount userAccount) {
        initComponents();
        this.system = system;
        this.en = en;
        this.network = net;
        this.account = userAccount;
        populateApplyTable(getAllRequest());
    }

    private ArrayList<WorkRequest> getAllRequest() {
        ArrayList<WorkRequest> list = new ArrayList<>();
        list.addAll(this.en.getWorkQ().getWorkRequests());
        list.addAll(this.account.getWorkQueue().getWorkRequests());
        return list;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        sendTestBtn = new javax.swing.JButton();
        viewResumeBtn = new javax.swing.JButton();
        cancelBtn = new javax.swing.JButton();
        viewResultBtn = new javax.swing.JButton();
        passBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        applicantTable = new javax.swing.JTable();

        sendTestBtn.setText("Give Test Authority");
        sendTestBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendTestBtnActionPerformed(evt);
            }
        });

        viewResumeBtn.setText("View Resume");
        viewResumeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewResumeBtnActionPerformed(evt);
            }
        });

        cancelBtn.setText("Reject");
        cancelBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelBtnActionPerformed(evt);
            }
        });

        viewResultBtn.setText("View Test Result");
        viewResultBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewResultBtnActionPerformed(evt);
            }
        });

        passBtn.setText("Pass");
        passBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                passBtnActionPerformed(evt);
            }
        });

        applicantTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Job", "Applicant", "Email", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        applicantTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_LAST_COLUMN);
        applicantTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                applicantTableMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(applicantTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(14, 14, 14)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 780, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(viewResumeBtn)
                        .addGap(18, 18, 18)
                        .addComponent(sendTestBtn)
                        .addGap(21, 21, 21)
                        .addComponent(passBtn)
                        .addGap(18, 18, 18)
                        .addComponent(cancelBtn)
                        .addGap(26, 26, 26)
                        .addComponent(viewResultBtn)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(70, 70, 70)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(sendTestBtn)
                    .addComponent(viewResumeBtn)
                    .addComponent(cancelBtn)
                    .addComponent(viewResultBtn)
                    .addComponent(passBtn))
                .addContainerGap(327, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void sendTestBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendTestBtnActionPerformed
        int index = applicantTable.getSelectedRow();
        if (index >= 0) {
            ApplyRequest selectedRequest = (ApplyRequest) applicantTable.getValueAt(index, 0);
            ExamRequest examRequest = new ExamRequest(en, selectedRequest.getAccount());
            if (selectedRequest.getApplicationstatus().equals(ApplicationStatus.Pending)) {
                if (selectedRequest.getExamRequest() == null) {
                    selectedRequest.createExamRequest(examRequest);
                    system.getWorkQ().addRequest(examRequest);
                    DB4OUtil.getInstance().storeSystem(system);

                    SelectExamCenterJFrame frame = new SelectExamCenterJFrame(system, network, selectedRequest);
                    frame.setLocationRelativeTo(null);
                    frame.setVisible(true);
                    populateApplyTable(getAllRequest());
                } else {
                    JOptionPane.showMessageDialog(null, "Test authroty has already given for once!");
                }
            }else{
                if(selectedRequest.getApplicationstatus().equals(ApplicationStatus.AD) || selectedRequest.getApplicationstatus().equals(ApplicationStatus.Reject)){
                    JOptionPane.showMessageDialog(null, "Test is no more needed!");
                }else{
                    JOptionPane.showMessageDialog(null, "Test authroty has already given for once!");
                }
                
            }

        }
    }//GEN-LAST:event_sendTestBtnActionPerformed

    private void populateApplyTable(ArrayList<WorkRequest> list) {
        DefaultTableModel dtm = (DefaultTableModel) applicantTable.getModel();
        dtm.setRowCount(0);
        for (WorkRequest wr : list) {
            if (wr instanceof ApplyRequest) {
                ApplyRequest ar = (ApplyRequest) wr;

                if (!ar.getApplystatus().equals(ApplicationStatus.AD) && !ar.getApplystatus().equals(ApplicationStatus.Reject)) {
                    if (ar.getExamRequest() != null && ar.getExamRequest().getExamStatus().equals(ExamStatus.Finished)) {
                        if (ar.getExamRequest().getScore() >= 60) {
                            ar.setApplicationstatus(ApplicationStatus.ExamPass);
                        } else {
                            ar.setApplicationstatus(ApplicationStatus.ExamFail);
                        }
                    }
                }

                Object row[] = new Object[4];
                row[0] = ar;
                row[1] = ar.getAccount();
                row[2] = ((Applicant) ar.getAccount().getApplicant()).getEmail();
                row[3] = ar.getApplystatus();
                dtm.addRow(row);
            }
        }
    }

    private void viewResumeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewResumeBtnActionPerformed
        // TODO add your handling code here:
        int index = applicantTable.getSelectedRow();

        ApplyRequest selectedRequest = (ApplyRequest) applicantTable.getValueAt(index, 0);
        ResumeJFrame resumeJFrame = new ResumeJFrame(selectedRequest.getResume());
        resumeJFrame.setLocationRelativeTo(null);
        resumeJFrame.setVisible(true);
    }//GEN-LAST:event_viewResumeBtnActionPerformed

    private void cancelBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelBtnActionPerformed
        // TODO add your handling code here:
        int index = applicantTable.getSelectedRow();
        if (index >= 0) {
            ApplyRequest selectedRequest = (ApplyRequest) applicantTable.getValueAt(index, 0);
            selectedRequest.setApplicationstatus(ApplicationStatus.Reject);
            populateApplyTable(getAllRequest());
        }
    }//GEN-LAST:event_cancelBtnActionPerformed

    private void viewResultBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewResultBtnActionPerformed
        // TODO add your handling code here:

        int index = applicantTable.getSelectedRow();
        ApplyRequest selectedRequest = (ApplyRequest) applicantTable.getValueAt(index, 0);
        if (selectedRequest.getExamRequest() != null && selectedRequest.getExamRequest().getExamStatus() != null && selectedRequest.getExamRequest().getExamStatus() == ExamStatus.Finished) {
            TestResultJFrame trJFrame = new TestResultJFrame(selectedRequest);
            trJFrame.setLocationRelativeTo(null);
            trJFrame.setVisible(true);
        } else {
            JOptionPane.showMessageDialog(null, "Score is not available now.");
        }

    }//GEN-LAST:event_viewResultBtnActionPerformed

    private void passBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_passBtnActionPerformed
        // TODO add your handling code here:
        int index = applicantTable.getSelectedRow();
        if (index >= 0) {
            ApplyRequest selectedRequest = (ApplyRequest) applicantTable.getValueAt(index, 0);
            selectedRequest.setApplicationstatus(ApplicationStatus.AD);
            populateApplyTable(getAllRequest());
        }
    }//GEN-LAST:event_passBtnActionPerformed

    private void applicantTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_applicantTableMouseClicked
        int index = applicantTable.getSelectedRow();

        //        if (index >= 0) {
        //            selectedRequest = (DeliveryRequest) applicantTable.getValueAt(index, 1);
        //            if (selectedRequest.getStatus().equals(StatusEnum.Ready)) {
        //                sendTestBtn.setEnabled(true);
        //                pickupButton.setEnabled(false);
        //                deliveredButton.setEnabled(false);
        //            }
        //            if (selectedRequest.getStatus().equals(StatusEnum.WaitForPickup)) {
        //                sendTestBtn.setEnabled(false);
        //                pickupButton.setEnabled(true);
        //                deliveredButton.setEnabled(false);
        //            }
        //            if (selectedRequest.getStatus().equals(StatusEnum.OnTheWay)) {
        //                sendTestBtn.setEnabled(false);
        //                pickupButton.setEnabled(false);
        //                deliveredButton.setEnabled(true);
        //            }
        //            if (selectedRequest.getStatus().equals(StatusEnum.Completed) ||
        //                    selectedRequest.getStatus().equals(StatusEnum.Cancelled)) {
        //                sendTestBtn.setEnabled(false);
        //                pickupButton.setEnabled(false);
        //                deliveredButton.setEnabled(false);
        //            }
        //            populateDetails();
        //        } else {
        //            sendTestBtn.setEnabled(false);
        //        }
    }//GEN-LAST:event_applicantTableMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable applicantTable;
    private javax.swing.JButton cancelBtn;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton passBtn;
    private javax.swing.JButton sendTestBtn;
    private javax.swing.JButton viewResultBtn;
    private javax.swing.JButton viewResumeBtn;
    // End of variables declaration//GEN-END:variables
}
