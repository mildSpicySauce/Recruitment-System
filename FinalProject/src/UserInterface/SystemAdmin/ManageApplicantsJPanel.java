/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.SystemAdmin;

import Business.Account.Account;
import Business.Account.ApplicantAccount;
import Business.Account.EmployeeAccount;
import Business.DB4OUtil.DB4OUtil;
import Business.EcoSystem;
import Business.Role.Role;
import Business.Role.SystemManagerRole;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author jxw
 */
public class ManageApplicantsJPanel extends javax.swing.JPanel {

    private EcoSystem system;
    private EmployeeAccount employeeAccount;

    /**
     * Creates new form ManageApplicantsJPanel
     */
    public ManageApplicantsJPanel() {
        initComponents();
    }

    ManageApplicantsJPanel(EcoSystem system, EmployeeAccount employeeAccount) {
        initComponents();
        this.system = system;
        this.employeeAccount = employeeAccount;
        
        populateTable();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane3 = new javax.swing.JScrollPane();
        applicantTbl = new javax.swing.JTable();
        createBtn = new javax.swing.JButton();
        viewBtn = new javax.swing.JButton();
        removeBtn = new javax.swing.JButton();

        applicantTbl.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Username", "Name", "Email", "Phone", "Application Nums"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane3.setViewportView(applicantTbl);

        createBtn.setText("Create Account");
        createBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createBtnActionPerformed(evt);
            }
        });

        viewBtn.setText("View Details");
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });

        removeBtn.setText("Remove Account");
        removeBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 678, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(createBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viewBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(removeBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 313, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(removeBtn)
                    .addComponent(viewBtn)
                    .addComponent(createBtn))
                .addContainerGap(58, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createBtnActionPerformed
        CreateAccountJFrame f = new CreateAccountJFrame(system, this);
        f.setLocationRelativeTo(null);
        f.setVisible(true);
    }//GEN-LAST:event_createBtnActionPerformed

    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        int index = applicantTbl.getSelectedRow();
        if(index>=0){
            Account account = (Account) applicantTbl.getValueAt(index, 0);
            ViewApplicantDetailJFrame vadJFrame = new ViewApplicantDetailJFrame(system, (ApplicantAccount)account, new SystemManagerRole(), this);
            vadJFrame.setLocationRelativeTo(this);
            vadJFrame.setVisible(true);
        }else{
            JOptionPane.showMessageDialog(null, "Please select a line.");
        }
        /**
         * int index = customerTable.getSelectedRow(); if (index >= 0) {
         * UserAccount account = (UserAccount) customerTable.getValueAt(index,
         * 0); SystemManagerMainJFrame f = new SystemManagerMainJFrame(system,
         * null, null, "", null, account, this); f.setLocationRelativeTo(this);
         * f.setVisible(true);
        }
         */
    }//GEN-LAST:event_viewBtnActionPerformed

    private void removeBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeBtnActionPerformed
        int index = applicantTbl.getSelectedRow();
        if (index >= 0) {
            Account account = (Account) applicantTbl.getValueAt(index, 0);
            int choice = JOptionPane.showConfirmDialog(null, "Are you sure to remove this applicant from the system?");
            if (choice == 0) {
                system.getAccountDir().removeAccount(account);

                DB4OUtil.getInstance().storeSystem(system);
                
                populateTable();
            }
        } else {
            JOptionPane.showConfirmDialog(null, "Please select an applicant.");
        }
    }//GEN-LAST:event_removeBtnActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable applicantTbl;
    private javax.swing.JButton createBtn;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton removeBtn;
    private javax.swing.JButton viewBtn;
    // End of variables declaration//GEN-END:variables

    public void populateTable(List<Account> list) {
        DefaultTableModel dtm = (DefaultTableModel) applicantTbl.getModel();
        dtm.setRowCount(0);
        for (Account u : list) {
            ApplicantAccount c = (ApplicantAccount) u;
            Object row[] = new Object[5];
            row[0] = c;
            row[1] = c.getApplicant().getFirstName()+" "+c.getApplicant().getLastName();
            row[2] = c.getApplicant().getEmail();
            row[3] = c.getApplicant().getPhone();
            row[4] = c.getApplicant().getApplications().size();
            dtm.addRow(row);
        }
    }
    
    public void populateTable() {
        List<Account> list = system.getAccountDir().getAccountList();
        List<Account> applicantsList = new ArrayList<>();
        for (Account ac : list) {
            if (ac instanceof ApplicantAccount) {
                applicantsList.add(ac);
            }
        }
        DefaultTableModel dtm = (DefaultTableModel) applicantTbl.getModel();
        dtm.setRowCount(0);
        for (Account u : applicantsList) {
            ApplicantAccount c = (ApplicantAccount) u;
            Object row[] = new Object[5];
            row[0] = c;
            row[1] = c.getApplicant().getFirstName()+" "+c.getApplicant().getLastName();
            row[2] = c.getApplicant().getEmail();
            row[3] = c.getApplicant().getPhone();
            row[4] = c.getApplicant().getApplications().size();
            dtm.addRow(row);
        }
    }
}
